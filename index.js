import 'dotenv/config';
import express from 'express';
import bodyParser from 'body-parser';
import OpenAI from 'openai';
import fetch from 'node-fetch';
import { google } from 'googleapis';
import { DateTime } from 'luxon';



const app = express();
app.use(bodyParser.json());

// ====== WHATSAPP (Cloud API) ======
const WA_VERIFY_TOKEN = process.env.WA_VERIFY_TOKEN;
const WA_PHONE_NUMBER_ID = process.env.WA_PHONE_NUMBER_ID;
const WA_ACCESS_TOKEN = process.env.WA_ACCESS_TOKEN;

// Enviar texto por WhatsApp
async function sendWhatsAppText(to, body) {
  const url = `https://graph.facebook.com/v20.0/${WA_PHONE_NUMBER_ID}/messages`;
  const payload = {
    messaging_product: 'whatsapp',
    to,
    text: { body: String(body || '').slice(0, 4096) },
  };
  const r = await fetch(url, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${WA_ACCESS_TOKEN}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(payload),
  });
  if (!r.ok) {
    const txt = await r.text().catch(() => '');
    console.error('‚ùå WA send error:', r.status, txt);
    throw new Error('wa_send_error');
  }
  return r.json();
}

// ====== VERIFICACI√ìN DEL WEBHOOK (GET /whatsapp) ======
app.get('/whatsapp', (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  if (mode === 'subscribe' && token === WA_VERIFY_TOKEN) {
    console.log('‚úÖ Webhook verificado correctamente');
    return res.status(200).send(challenge);
  }
  return res.sendStatus(403);
});

// ====== MENSAJES ENTRANTES (POST /whatsapp) ======
app.post('/whatsapp', async (req, res) => {
  try {
    const entry = req.body?.entry?.[0];
    const change = entry?.changes?.[0];
    const value = change?.value;
    const msg = value?.messages?.[0];

    if (!msg) return res.sendStatus(200); // ignorar si no hay mensaje

    const from = msg.from; // n√∫mero del remitente
    let userText = '';

    if (msg.type === 'text') {
      userText = msg.text?.body || '';
    } else if (msg.type === 'interactive') {
      userText =
        msg.interactive?.button_reply?.title ||
        msg.interactive?.list_reply?.title ||
        msg.interactive?.button_reply?.id ||
        msg.interactive?.list_reply?.id || '';
    } else {
      userText = 'üìé Recib√≠ tu mensaje. ¬øC√≥mo quieres continuar?';
    }

    // Pasamos el texto a tu endpoint /chat
    let botReply = 'Ups, no pude procesar tu mensaje.';
    try {
      const r = await fetch('http://localhost:3000/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: userText }),
      });
      const data = await r.json();
      botReply = data?.reply || botReply;
    } catch (e) {
      console.error('‚ùå Error llamando /chat:', e);
    }

    await sendWhatsAppText(from, botReply);
    return res.sendStatus(200);
  } catch (e) {
    console.error('‚ùå Webhook error:', e);
    return res.sendStatus(500);
  }
});




// ====== CONFIG ======
const ZONE = 'America/Bogota';
const MAKE_WEBHOOK_URL = process.env.MAKE_WEBHOOK_URL;
const CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID;

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const auth = new google.auth.GoogleAuth({ scopes: ['https://www.googleapis.com/auth/calendar'] });
const calendar = google.calendar({ version: 'v3', auth });

// ====== PROMPT MAESTRO (Pega aqu√≠ tu versi√≥n final ya ajustada) ======
const systemPrompt = `

Eres Sana, el asistente virtual de la consulta de mastolog√≠a del Dr. Juan Felipe Arias.
Tu misi√≥n es recibir pacientes, registrar sus datos, validar informaci√≥n cl√≠nica b√°sica y solicitar acciones de disponibilidad/agendamiento a trav√©s de integraciones (Make + Google Sheets/Calendar) devolviendo √∫nicamente bloques JSON cuando corresponda.

üéØ Objetivos

Saludar,pedir el nombre  y presentarte.



Identificar motivo de consulta:

Primera vez

Control presencial

Control de resultados virtuales

Biopsia guiada por ecograf√≠a

Programaci√≥n de cirug√≠a ‚Üí transferir a humano (Isa/Deivis)

Actualizaci√≥n de √≥rdenes ‚Üí transferir a humano (Isa/Deivis)

Verificar seguro m√©dico: Sudamericana, Colsanitas, Medplus, Bol√≠var, Allianz, Colm√©dica, Coomeva o particular. No atendemos EPS.

Solicitar im√°genes y BIRADS si aplica:

BIRADS 4 o 5 ‚Üí priorizar ‚â§ 3 d√≠as h√°biles; si no hay cupo, transferir a humano.

BIRADS 3 ‚Üí ‚â§ 7 d√≠as h√°biles.

BIRADS 1 o 2 ‚Üí mensaje tranquilizador.

Sin estudios ‚Üí preguntar s√≠ntomas de alarma (masa/n√≥dulo < 3 meses). Si s√≠ ‚Üí ‚â§ 3 d√≠as h√°biles.

√ìrdenes vencidas ‚Üí transferir a humano.

üßæ Registro de paciente

Para toda cita: Nombre completo, c√©dula y entidad de salud (obligatorio antes de confirmar).

Para Primera vez (obligatorio adem√°s): Fecha de nacimiento, tipo de sangre, estado civil, ciudad, direcci√≥n, correo, celular, estudios previos (si tuvo, cu√°ndo y d√≥nde).

No confirmes cita hasta tener todos los datos obligatorios.

üóìÔ∏è Agenda y reglas (estrictas)

Lugar: Cl√≠nica Portoazul, piso 7, consultorio 707, Barranquilla.

Duraciones:

Primera vez: 20 min

Control presencial: 15 min

Control virtual: 10 min

Biopsia: 30 min

Ventanas por d√≠a/tipo:

Lunes (presencial): 08:00‚Äì11:30 y 14:00‚Äì17:30

Martes: sin consulta (cualquier intento ‚Üí rechazar)

Mi√©rcoles/Jueves (presencial): 14:00‚Äì16:30

Viernes:

Presencial: 08:00‚Äì11:30

Virtual: 14:00‚Äì17:30 (solo controles virtuales)

Nunca agendes fuera de estas ventanas.

Nunca propongas martes.

Nunca propongas fechas pasadas.

No agendar m√°s all√° de 15 d√≠as (si el paciente pide m√°s lejos, ofrece rango v√°lido o transfiere a humano).

‚úÖ Confirmaci√≥n y recordatorios

No declares ‚Äúcita confirmada‚Äù en texto.

Debes emitir el bloque JSON para crear la cita y esperar la confirmaci√≥n del sistema (el backend responder√°).

Siempre dar resumen (cuando el sistema confirme): fecha, hora, duraci√≥n, lugar.

Recordatorios: llegar 15 min antes; traer mamograf√≠as, ecograf√≠as, resonancias, biopsias, informes quir√∫rgicos; prohibido grabar sin autorizaci√≥n (Ley 1581/2012).

üí¨ Estilo de conversaci√≥n

Dir√≠gete por el nombre del paciente.

Sin emojis.

Claro, breve, sin desv√≠os: si falta un dato obligatorio, insiste con cortes√≠a.

Si no hay citas disponibles dentro de las reglas ‚Üí transferir a humano.

üíµ Costos (solo si preguntan)

Consulta de mastolog√≠a: 350.000 COP

Biopsia guiada por ecograf√≠a (particular): 800.000 COP (incluye patolog√≠a, no lectura)

üîå Integraciones y acciones (JSON Only)

Siempre que necesites guardar datos o pedir disponibilidad/agendar, devuelve exclusivamente un bloque JSON v√°lido (sin texto antes o despu√©s).
Si necesitas hacer dos acciones (por ejemplo, guardar y luego crear cita), env√≠a cada bloque en mensajes separados, en este orden: primero guardar_paciente, luego crear_cita.

1) Guardar paciente (Google Sheets)
{
  "action": "guardar_paciente",
  "data": {
    "nombre": "Ana L√≥pez",
    "cedula": "12345678",
    "fecha_nacimiento": "1985-06-20",
    "tipo_sangre": "O+",
    "estado_civil": "Casada",
    "ciudad": "Barranquilla",
    "direccion": "Cra 45 #23-10",
    "correo": "ana@mail.com",
    "celular": "3101234567",
    "entidad_salud": "Colsanitas",
    "estudios_previos": "S√≠",
    "fecha_estudio": "2024-02-10",
    "lugar_estudio": "Cl√≠nica Portoazul"
  }
}

2) Consultar disponibilidad de un d√≠a (usa siempre YYYY-MM-DD)

Cuando el paciente pida ‚Äúhorarios‚Äù para una fecha concreta:

{
  "action": "consultar_disponibilidad",
  "data": {
    "tipo": "Control presencial",
    "fecha": "2025-10-06"
  }
}

3) Consultar d√≠as con cupo (rango)

Si el paciente pide ‚Äúqu√© d√≠as tienes libres‚Äù o no da fecha:

{
  "action": "consultar_disponibilidad_rango",
  "data": {
    "tipo": "Control presencial",
    "desde": "2025-10-01",
    "dias": 14
  }
}

4) Crear cita (Google Calendar) ‚Äî solo futura y dentro de ventanas

Cuando el paciente elija un horario devuelto por disponibilidad:

{
  "action": "crear_cita",
  "data": {
    "nombre": "Ana L√≥pez",
    "cedula": "12345678",
    "entidad_salud": "Colsanitas",
    "tipo": "Control presencial",
    "inicio": "2025-10-06T08:00:00-05:00",
    "fin": "2025-10-06T08:15:00-05:00"
  }
}


Reglas para acciones:

No generes horas inventadas: primero consulta disponibilidad (d√≠a o rango) y ofrece solo lo que devuelva el sistema.

No devuelvas martes ni horarios fuera de ventana.

No devuelvas fechas en pasado.

No confirmes en texto: deja que el sistema confirme y luego resume.

üß≠ Flujo recomendado

Identifica motivo y seguro (sin EPS).

Pide BIRADS / s√≠ntomas de alarma seg√∫n reglas.

Si faltan datos obligatorios, p√≠delos (para Primera vez: todos los de la lista).

Disponibilidad:

No env√≠es {"action":"consultar_disponibilidad_rango"} a menos que el usuario lo solicite expl√≠citamente. Si el usuario elige un d√≠a concreto, usa s√≥lo consultar_disponibilidad (un d√≠a).

Si el paciente dice ‚Äú¬øqu√© horarios?‚Äù sin fecha ‚Üí env√≠a consultar_disponibilidad_rango (desde hoy, 14 d√≠as).

Si da fecha ‚Üí env√≠a consultar_disponibilidad.

Tras elegir hora, si es primera vez: primero guardar_paciente, luego crear_cita.
Para control presencial/virtual: si faltan nombre/cedula/entidad, p√≠delos; si ya est√°n, crear_cita.

Cuando el sistema confirme, entrega resumen (fecha, hora, duraci√≥n, lugar) + recordatorios/legales.

üß± Reglas duras (no romper)

No martes, no fuera de ventana, no pasado, no >15 d√≠as.

No confirmar sin que el sistema responda.

No mezclar texto y JSON en el mismo mensaje.

Si el sistema indica ‚Äúocupado‚Äù o ‚Äúfuera de horario‚Äù, no contradigas: propone alternativas pidiendo disponibilidad de nuevo.

`;

// ====== Memoria simple de la conversi√≥n ======
let history = [{ role: 'system', content: systemPrompt }];
let lastSystemNote = null; // para ‚Äúrecordarle‚Äù a Sana lo √∫ltimo que pas√≥ (ocupado, fuera de horario, etc.)

// ====== HELPERS ======
const norm = (s = '') =>
  String(s || '').normalize('NFD').replace(/\p{Diacritic}/gu, '').toLowerCase().trim();

function duracionPorTipo(tipo = '') {
  const t = norm(tipo);
  if (t.includes('primera')) return 20;
  if (t.includes('control presencial')) return 15;
  if (t.includes('control virtual')) return 10;
  if (t.includes('biopsia')) return 30;
  return 15;
}

// Reglas m√°s recientes que nos diste:
function ventanasPorDia(date, tipo = '') {
  // date = Luxon DateTime (zona ya set)
  const dow = date.weekday; // 1=Lun ... 7=Dom
  const t = norm(tipo);
  const v = [];
  const H = (h, m = 0) => date.set({ hour: h, minute: m, second: 0, millisecond: 0 });
  const push = (start, end) => { if (end > start) v.push({ start, end }); };

  if (dow === 2) return v; // Martes: NO consulta

  if (dow === 1) { // Lunes
    if (t.includes('control virtual')) return v; // virtual s√≥lo viernes
    push(H(8, 0), H(11, 30));
    push(H(14, 0), H(17, 30));
    return v;
  }

  if (dow === 3 || dow === 4) { // Mi√©rcoles/Jueves (presencial tarde)
    if (t.includes('control virtual')) return v;
    push(H(14, 0), H(16, 30));
    return v;
  }

  if (dow === 5) { // Viernes
    if (t.includes('control virtual')) {
      // Virtual s√≥lo viernes tarde
      push(H(14, 0), H(17, 30));
    } else {
      // Presencial viernes ma√±ana
      push(H(8, 0), H(11, 30));
    }
    return v;
  }

  return v; // S√°bado/Domingo: vac√≠o
}

function generarSlots(dateISO, tipo, maxSlots = 100) {
  const date = DateTime.fromISO(dateISO, { zone: ZONE });
  const ventanas = ventanasPorDia(date, tipo);
  const dur = duracionPorTipo(tipo);
  const slots = [];

  for (const win of ventanas) {
    let cursor = win.start;
    while (cursor.plus({ minutes: dur }) <= win.end) {
      const fin = cursor.plus({ minutes: dur });
      slots.push({
        inicio: cursor.toISO({ suppressMilliseconds: true }),
        fin: fin.toISO({ suppressMilliseconds: true }),
      });
      cursor = fin;
      if (slots.length >= maxSlots) break;
    }
    if (slots.length >= maxSlots) break;
  }
  return { dur, ventanas, slots };
}

function overlaps(aStart, aEnd, bStart, bEnd) {
  return aStart < bEnd && aEnd > bStart;
}

async function consultarBusy(ventanas) {
  if (!ventanas.length) return [];
  const timeMin = ventanas[0].start.toUTC().toISO();
  const timeMax = ventanas[ventanas.length - 1].end.toUTC().toISO();

  const resp = await calendar.freebusy.query({
    requestBody: {
      timeMin,
      timeMax,
      items: [{ id: CALENDAR_ID }],
      timeZone: ZONE,
    },
  });

  const cal = resp.data.calendars?.[CALENDAR_ID];
  const busy = (cal?.busy || []).map(b => ({
    start: DateTime.fromISO(b.start, { zone: ZONE }),
    end: DateTime.fromISO(b.end, { zone: ZONE }),
  }));
  return busy;
}

function filtrarSlotsLibres(slots, busy) {
  if (!busy.length) return slots;
  return slots.filter(s => {
    const s1 = DateTime.fromISO(s.inicio, { zone: ZONE });
    const s2 = DateTime.fromISO(s.fin, { zone: ZONE });
    return !busy.some(b => overlaps(s1, s2, b.start, b.end));
  });
}

function slotDentroDeVentanas(startISO, endISO, tipo) {
  const s = DateTime.fromISO(startISO, { zone: ZONE });
  const e = DateTime.fromISO(endISO, { zone: ZONE });
  const ventanas = ventanasPorDia(s, tipo);
  if (!ventanas.length) return false;
  return ventanas.some(w => s >= w.start && e <= w.end);
}

function coerceFutureISODate(dateStr) {
  // Empuja el a√±o hacia futuro si viene pasado (evita 2023 etc.)
  let d = DateTime.fromISO(dateStr, { zone: ZONE });
  if (!d.isValid) return DateTime.now().setZone(ZONE).toISODate();
  const today = DateTime.now().setZone(ZONE).startOf('day');
  while (d < today) d = d.plus({ years: 1 });
  return d.toISODate();
}

function coerceFutureISODateOrToday(dateStr) {
  let d = DateTime.fromISO(dateStr, { zone: ZONE });
  if (!d.isValid) return DateTime.now().setZone(ZONE).toISODate();
  const today = DateTime.now().setZone(ZONE).startOf('day');
  if (d < today) return today.toISODate();
  return d.toISODate();
}

async function disponibilidadPorDias({ tipo, desdeISO, dias = 14, maxSlotsPorDia = 6 }) {
  // cap de negocio / performance
  if (dias > 15) dias = 15;
  if (dias > 10) dias = 10;

  console.time(`disponibilidad:${desdeISO}:${dias}:${tipo}`);
  const start = DateTime.fromISO(desdeISO, { zone: ZONE });

  // Prepara la lista de d√≠as a consultar
  const diasLista = [];
  for (let i = 0; i < dias; i++) diasLista.push(start.plus({ days: i }));

  const CONCURRENCY = 3; // 3 consultas a la vez (ajustable)
  const out = [];
  let idx = 0;

  async function worker(workerId) {
    while (true) {
      let d;
      // secci√≥n cr√≠tica
      if (idx < diasLista.length) {
        d = diasLista[idx];
        idx += 1;
      } else {
        break;
      }

      try {
        const dISO = d.toISODate();
        // Genera ventanas y slots del d√≠a
        const { dur, ventanas, slots } = generarSlots(dISO, tipo, 200);
        if (!ventanas.length) {
          // D√≠a sin consulta seg√∫n reglas
          continue;
        }

        // FreeBusy para ese d√≠a y filtrado
        console.time(`fb:${dISO}`);
        const busy = await consultarBusy(ventanas);
        console.timeEnd(`fb:${dISO}`);

        const libres = filtrarSlotsLibres(slots, busy);
        if (libres.length > 0) {
          out.push({
            fecha: dISO,
            duracion_min: dur,
            total: libres.length,
            ejemplos: libres.slice(0, maxSlotsPorDia).map(s =>
              DateTime.fromISO(s.inicio, { zone: ZONE }).toFormat('HH:mm')
            ),
            slots: libres.slice(0, maxSlotsPorDia),
          });
        }
      } catch (e) {
        console.error('‚ö†Ô∏è Error consultando d√≠a:', e);
      }
    }
  }

  // Lanza N workers en paralelo
  await Promise.all(Array.from({ length: CONCURRENCY }, (_, i) => worker(i)));

  // Ordena por fecha por si llegaron desordenados
  out.sort((a, b) => a.fecha.localeCompare(b.fecha));

  console.timeEnd(`disponibilidad:${desdeISO}:${dias}:${tipo}`);
  return out;
}


async function alternativasCercanas({ tipo, desdeISO, dias = 10, limite = 6 }) {
  const lista = await disponibilidadPorDias({ tipo, desdeISO, dias, maxSlotsPorDia: limite });
  const planos = [];
  for (const d of lista) {
    for (const s of d.slots) {
      planos.push({ fecha: d.fecha, inicio: s.inicio, fin: s.fin, duracion_min: d.duracion_min });
      if (planos.length >= limite) break;
    }
    if (planos.length >= limite) break;
  }
  return planos;
}

// ====== MAKE WEBHOOK ======
async function postToMake(json) {
  try {
    const r = await fetch(MAKE_WEBHOOK_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(json),
    });
    return await r.json();
  } catch (e) {
    console.error('‚ùå Error Make:', e);
    return { ok: false, error: 'make_error' };
  }
}

// ====== PARSER DE ACCIONES DEVUELTAS POR LA IA (con o sin ```json) ======
function extractActionJSONBlocks(text = '') {
  const out = [];

  // 1) Fenced ```json ... ```
  const fenced = [...text.matchAll(/```json\s*([\s\S]*?)\s*```/gi)];
  for (const m of fenced) {
    try {
      const obj = JSON.parse(m[1].trim());
      if (obj && typeof obj === 'object' && obj.action) out.push(obj);
    } catch { /* ignore */ }
  }

  // 2) Fallback: buscar objetos con "action"
  if (out.length === 0) {
    const rawMatches = text.match(/{[\s\S]{0,2000}?"action"\s*:\s*".+?"[\s\S]{0,2000}?}/g);
    if (rawMatches) {
      for (const raw of rawMatches) {
        try {
          const obj = JSON.parse(raw);
          if (obj && typeof obj === 'object' && obj.action) out.push(obj);
        } catch { /* ignore */ }
      }
    }
  }

  return out;
}

// ====== EJECUTOR DE ACCIONES ======
async function maybeHandleAssistantAction(text) {
  const payloads = extractActionJSONBlocks(text);
  if (!payloads.length) return null;

  const results = [];
  const now = DateTime.now().setZone(ZONE);

  for (const payload of payloads) {
    const action = norm(payload.action);

    // ---- DISPONIBILIDAD (un d√≠a) ----
    if (action === 'consultar_disponibilidad') {
      const { tipo = 'Control presencial' } = payload.data || {};
      let { fecha } = payload.data || {};
      if (fecha) fecha = coerceFutureISODate(fecha);

      const { dur, ventanas, slots } = generarSlots(fecha, tipo, 60);
      if (!ventanas.length) {
        results.push({ ok: true, fecha, tipo, duracion_min: dur, slots: [], note: 'D√≠a sin consulta seg√∫n reglas' });
        continue;
      }
      const busy = await consultarBusy(ventanas);
      const libres = filtrarSlotsLibres(slots, busy).slice(0, 12);
      results.push({ ok: true, fecha, tipo, duracion_min: dur, slots: libres });
      continue;
    }

    // ---- DISPONIBILIDAD (rango de d√≠as) ----
    if (action === 'consultar_disponibilidad_rango') {
      const { tipo = 'Control presencial' } = payload.data || {};
      let { desde, dias = 14 } = payload.data || {};
      const desdeFixed = desde ? coerceFutureISODateOrToday(desde) : now.toISODate();
      if (dias > 15) dias = 15; // cap de negocio
      const lista = await disponibilidadPorDias({ tipo, desdeISO: desdeFixed, dias });
      results.push({ ok: true, tipo, desde: desdeFixed, dias, dias_disponibles: lista });
      continue;
    }

    // ---- CREAR CITA ----
    if (action === 'crear_cita') {
      const d = payload.data || {};
      const s = DateTime.fromISO(d.inicio, { zone: ZONE });
      const e = DateTime.fromISO(d.fin, { zone: ZONE });

      // Validaci√≥n b√°sica
      if (!s.isValid || !e.isValid || s >= e) {
        results.push({ ok: false, error: 'fecha_invalida', message: 'Fecha/hora inv√°lida.' });
        lastSystemNote = 'El √∫ltimo intento fall√≥: fecha/hora inv√°lida.';
        continue;
      }

      // Futuro y dentro de 15 d√≠as
      const maxDay = now.plus({ days: 15 }).endOf('day');
      if (s < now) {
        const alt = await alternativasCercanas({ tipo: d.tipo, desdeISO: now.toISODate(), dias: 10, limite: 6 });
        results.push({ ok: false, error: 'fecha_pasada', message: 'La hora elegida ya pas√≥. Elige una fecha futura.', alternativas: alt });
        lastSystemNote = 'Fall√≥ por fecha pasada. Se propusieron alternativas.';
        continue;
      }
      if (s > maxDay) {
        const alt = await alternativasCercanas({ tipo: d.tipo, desdeISO: now.toISODate(), dias: 15, limite: 6 });
        results.push({ ok: false, error: 'fuera_rango', message: 'No agendamos m√°s all√° de 15 d√≠as.', alternativas: alt });
        lastSystemNote = 'Fall√≥ por m√°s de 15 d√≠as. Se propusieron alternativas.';
        continue;
      }

      // Dentro de ventanas y no martes
      if (!slotDentroDeVentanas(d.inicio, d.fin, d.tipo)) {
        const alt = await alternativasCercanas({ tipo: d.tipo, desdeISO: s.toISODate(), dias: 10, limite: 6 });
        results.push({
          ok: false,
          error: 'fuera_horario',
          message: 'Ese d√≠a/horario no es v√°lido seg√∫n las reglas (martes sin consulta u hora fuera de rango).',
          alternativas: alt
        });
        lastSystemNote = 'Fall√≥ por fuera de horario. Se propusieron alternativas.';
        continue;
      }

      // Chequear ocupado con FreeBusy
      const fb = await calendar.freebusy.query({
        requestBody: {
          timeMin: s.toUTC().toISO(),
          timeMax: e.toUTC().toISO(),
          items: [{ id: CALENDAR_ID }],
          timeZone: ZONE,
        },
      });
      const cal = fb.data.calendars?.[CALENDAR_ID];
      const busy = (cal?.busy || []).map(b => ({
        start: DateTime.fromISO(b.start, { zone: ZONE }),
        end: DateTime.fromISO(b.end, { zone: ZONE }),
      }));
      const solapa = busy.some(b => overlaps(s, e, b.start, b.end));
      if (solapa) {
        const alt = await alternativasCercanas({ tipo: d.tipo, desdeISO: s.toISODate(), dias: 10, limite: 6 });
        results.push({ ok: false, error: 'slot_ocupado', message: 'Ese horario ya est√° reservado. Elige otra opci√≥n.', alternativas: alt });
        lastSystemNote = 'Fall√≥ por slot ocupado. Se propusieron alternativas.';
        continue;
      }

      // OK ‚Üí delega creaci√≥n a Make
      const resp = await postToMake(payload);
      results.push(resp);
      if (resp?.ok !== true) {
        lastSystemNote = 'No se pudo crear la cita en Make. Reintenta u ofrece alternativas.';
      } else {
        lastSystemNote = 'La √∫ltima cita fue creada correctamente en el calendario.';
      }
      continue;
    }

    // ---- GUARDAR PACIENTE ----
    if (action === 'guardar_paciente') {
      const resp = await postToMake(payload);
      results.push(resp);
      continue;
    }
  }

  if (results.length === 1) return { handled: true, makeResponse: results[0] };
  return { handled: true, makeResponse: results };
}

// ====== ENDPOINTS ======
app.post('/chat', async (req, res) => {
  const userMsg = String(req.body.message || '').trim();

  // Reset opcional (para tu CLI :reset)
  if (userMsg === '__RESET__') {
    history = [{ role: 'system', content: systemPrompt }];
    lastSystemNote = null;
    return res.json({ ok: true, reset: true });
  }

  // Nota de contexto (fija reglas temporales)
  const todayNote = `Hoy es ${DateTime.now().setZone(ZONE).toISODate()} (${ZONE}). Recuerda: Martes sin consulta; virtual s√≥lo viernes tarde; no agendar m√°s de 15 d√≠as; no usar fechas pasadas.`;
  history.push({ role: 'system', content: todayNote });
  if (lastSystemNote) {
    history.push({ role: 'system', content: lastSystemNote });
    lastSystemNote = null;
  }

  history.push({ role: 'user', content: userMsg });

  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: history,
    });

    let reply = completion.choices[0].message.content || '';
    const actionResult = await maybeHandleAssistantAction(reply);

    if (actionResult?.handled && actionResult.makeResponse) {
      const mr = actionResult.makeResponse;
      const many = Array.isArray(mr) ? mr : [mr];
      const errors = many.filter(x => x && x.ok === false);
      const daysResp = many.find(x => Array.isArray(x?.dias_disponibles));
      const daySlots = many.find(x => Array.isArray(x?.slots));

      if (errors.length) {
        // formateo de errores + alternativas
        let msg = errors.map(e => {
          let linea = `‚ö†Ô∏è ${e.message || 'No se pudo crear la cita.'}`;
          if (Array.isArray(e.alternativas) && e.alternativas.length) {
            const opts = e.alternativas.map((s, i) => {
              const h = DateTime.fromISO(s.inicio, { zone: ZONE }).toFormat('dd-LL HH:mm');
              return `${i + 1}) ${h}`;
            }).join(', ');
            linea += `\nOpciones: ${opts}`;
          }
          return linea;
        }).join('\n\n');
        reply = msg;
      } else if (daySlots) {
        if (!daySlots.slots.length) {
          reply = `Para ${daySlots.fecha} (${daySlots.tipo}) no hay cupos v√°lidos (o est√° todo ocupado). ¬øQuieres otra fecha?`;
        } else {
          const items = daySlots.slots.map((s, i) =>
            `${i + 1}) ${DateTime.fromISO(s.inicio, { zone: ZONE }).toFormat('HH:mm')}`
          ).join(', ');
          reply = `Disponibilidad para ${daySlots.fecha} (${daySlots.tipo}, ${daySlots.duracion_min} min): ${items}. Elige un n√∫mero.`;
        }
      } else if (daysResp) {
        if (!daysResp.dias_disponibles.length) {
          reply = `No tengo cupos en los pr√≥ximos ${daysResp.dias} d√≠as para ${daysResp.tipo}. ¬øProbamos otro rango?`;
        } else {
          const lineas = daysResp.dias_disponibles.map(d =>
            `- ${d.fecha} (${d.duracion_min} min): ${d.ejemplos.join(', ')}`
          ).join('\n');
          reply = `D√≠as con cupo:\n${lineas}\n\n¬øQuieres alguno de esos d√≠as/horas?`;
        }
      }

      history.push({ role: 'assistant', content: reply });
      return res.json({ reply, makeResponse: actionResult.makeResponse });
    }

    history.push({ role: 'assistant', content: reply });
    res.json({ reply, makeResponse: null });
  } catch (e) {
    console.error('OpenAI error:', e);
    res.status(500).json({ error: 'ai_error' });
  }
});

// Disponibilidad por d√≠a (forzando futuro para evitar 2023)
app.post('/availability', async (req, res) => {
  try {
    const { tipo = 'Control presencial' } = req.body;
    let { fecha } = req.body;
    if (!fecha) return res.status(400).json({ ok: false, error: 'falta_fecha' });

    fecha = coerceFutureISODate(fecha);
    const { dur, ventanas, slots } = generarSlots(fecha, tipo, 100);
    if (!ventanas.length) return res.json({ ok: true, fecha, tipo, duracion_min: dur, slots: [] });

    const busy = await consultarBusy(ventanas);
    const libres = filtrarSlotsLibres(slots, busy).slice(0, 20);
    res.json({ ok: true, fecha, tipo, duracion_min: dur, slots: libres });
  } catch (e) {
    console.error(e);
    res.status(500).json({ ok: false, error: 'server_error' });
  }
});

// D√≠as con cupo (forzando futuro; m√°ximo 15 d√≠as)
app.post('/availability-range', async (req, res) => {
  try {
    const { tipo = 'Control presencial' } = req.body;
    let { desde, dias = 14 } = req.body;
    if (!desde) return res.status(400).json({ ok: false, error: 'falta_desde' });
    if (dias > 15) dias = 15;

    const desdeFixed = coerceFutureISODateOrToday(desde);
    const diasDisp = await disponibilidadPorDias({ tipo, desdeISO: desdeFixed, dias });
    res.json({ ok: true, tipo, desde: desdeFixed, dias, dias_disponibles: diasDisp });
  } catch (e) {
    console.error(e);
    res.status(500).json({ ok: false, error: 'server_error' });
  }
});

// ====== ARRANQUE DEL SERVIDOR ======
app.listen(3000, () => {
  console.log('üöÄ Servidor en http://localhost:3000');
});
